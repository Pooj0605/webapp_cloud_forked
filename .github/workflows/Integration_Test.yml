name: Integration_test

on:
  pull_request:
    types:
      - closed

jobs:
  if_merged:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Google cloud auth
        uses: 'google-github-actions/auth@v2'
        with:
            credentials_json: ${{ secrets.GCP_SA_KEY }}
        
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Create .env file
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
         
      - name: Install MySQL
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-server
          sudo systemctl start mysql.service
      - run: |
          sudo /etc/init.d/mysql start
          mysql -e 'CREATE DATABASE ${{ secrets.DB_NAME }};' -u${{ secrets.DB_USER }} -p"${{ secrets.DB_PASSWORD }}"
          mysql -e 'SHOW DATABASES;' -u${{ secrets.DB_USER }} -p"${{ secrets.DB_PASSWORD }}"
          
      - name: Install dependencies
        run: npm install

      - name: Run Jest Tests
        run: npm test --verbose

     

      - name: Zip the project directory
        run: zip -r webapp.zip ./

      - name: Install Packer
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install packer


      - name: Initialize Packer
        run: packer init Infrastructure_template.pkr.hcl

      - name: Build the GCP image with Packer
        run: | 
          IMAGE_CUSTOM=$(packer build -machine-readable Infrastructure_template.pkr.hcl  | grep -m 1 "A disk image was created" | awk '{print $NF}')
          echo "CUSTOM_NAME=$IMAGE_CUSTOM" >> $GITHUB_ENV

      - name: Get the source_name details
        run: |
          read -r name zone <<< $(gcloud compute instance-groups managed list-instances ${{ secrets.IG_NAME }} --region=${{ secrets.Region }} | awk '/RUNNING/{print $1, $2; exit}')
          echo "SOURCE_INSTANCE_NAME=$name" >> $GITHUB_ENV
          echo "ZONE=$zone" >> $GITHUB_ENV

      - name: Recreate instance template
        run: |
              echo "TEMPLATE_NAME=$(gcloud compute instance-templates create "${{ secrets.Vm_Template }}-$(date +%s)" \
              --source-instance=${{ env.SOURCE_INSTANCE_NAME }} \
              --source-instance-zone=${{ env.ZONE }} \
              --instance-template-region=${{ secrets.Region }} \
              --configure-disk=device-name=${{ secrets.dev_name }},instantiate-from=custom-image,custom-image=projects/${{ secrets.Project_Id}}/global/images/${{ env.CUSTOM_NAME}},auto-delete=true | awk 'NR==2{print $1}')" >> $GITHUB_ENV

      - name: Update Managed Instance Group with New Template
        run: |
              gcloud compute instance-groups managed set-instance-template ${{ secrets.IG_NAME }} \
              --template=projects/${{ secrets.Project_Id }}/regions/${{ secrets.Region }}/instanceTemplates/${{ env.TEMPLATE_NAME }} \
              --region=${{ secrets.REGION }}
              
      - name: Rolling start update
        run: |
               gcloud compute instance-groups managed rolling-action start-update ${{ secrets.IG_NAME }} \
               --version=template=projects/${{ secrets.Project_Id }}/regions/${{ secrets.Region }}/instanceTemplates/${{ env.TEMPLATE_NAME }} \
               --region=${{ secrets.Region }}
      - name: Update status check
        run: gcloud compute instance-groups managed wait-until ${{ secrets.IG_NAME }} --version-target-reached --region=${{ secrets.Region }}